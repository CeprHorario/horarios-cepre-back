generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid()) @db.Uuid
  email       String       @unique @db.VarChar(48)
  password    String?      @db.VarChar(128)
  isActive    Boolean      @default(true) @map("is_active")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @default(now()) @updatedAt @map("updated_at")
  lastLogin   DateTime?    @map("last_login")
  googleId    String?      @unique @map("google_id") @db.VarChar(64)
  role        String       @db.VarChar(48)
  monitor     Monitor?
  supervisor  Supervisor?
  teacher     Teacher?
  userProfile UserProfile?

  @@index([role])
  @@map("users")
}

model UserProfile {
  id               String   @id @default(uuid()) @db.Uuid
  userId           String   @unique @map("user_id") @db.Uuid
  dni              String   @unique @db.VarChar(10)
  firstName        String   @map("first_name") @db.VarChar(128)
  lastName         String   @map("last_name") @db.VarChar(128)
  phone            String?  @db.VarChar(15)
  phonesAdditional String[] @map("phones_additional") @db.VarChar(15)
  address          String?  @db.VarChar(255)
  personalEmail    String?  @unique @map("personal_email") @db.VarChar(48)
  isActive         Boolean  @default(true) @map("is_active")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @updatedAt @map("updated_at")
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Teacher {
  id             String       @id @default(uuid()) @db.Uuid
  userId         String       @unique @map("user_id") @db.Uuid
  courseId       Int          @map("course_id") @db.SmallInt
  maxHours       Int?         @map("max_hours") @db.SmallInt
  scheduledHours Int?         @map("scheduled_hours") @db.SmallInt
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @default(now()) @updatedAt @map("updated_at")
  isActive       Boolean      @default(true) @map("is_active")
  jobShiftType   JobShiftType @map("job_shift_type")
  schedules      Schedule[]
  courses        Course       @relation(fields: [courseId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@map("teachers")
}

model Supervisor {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @unique @map("user_id") @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  monitors  Monitor[]
  users     User      @relation(fields: [userId], references: [id])

  @@map("supervisors")
}

model Monitor {
  id           String      @id @default(uuid()) @db.Uuid
  userId       String      @unique @map("user_id") @db.Uuid
  supervisorId String?     @map("supervisor_id") @db.Uuid
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @default(now()) @updatedAt @map("updated_at")
  classes      Class?
  supervisors  Supervisor? @relation(fields: [supervisorId], references: [id], onDelete: Restrict)
  user         User        @relation(fields: [userId], references: [id])

  @@map("monitors")
}

model Area {
  id              Int              @id @default(autoincrement()) @db.SmallInt
  name            String           @unique @db.VarChar(48)
  description     String?          @db.VarChar(255)
  areaCourseHours AreaCourseHour[]
  classes         Class[]

  @@map("areas")
}

model AreaCourseHour {
  id         Int    @id @default(autoincrement())
  areaId     Int    @map("area_id") @db.SmallInt
  courseId   Int    @map("course_id") @db.SmallInt
  totalHours Int    @map("total_hours") @db.SmallInt
  area       Area   @relation(fields: [areaId], references: [id])
  course     Course @relation(fields: [courseId], references: [id])

  @@unique([areaId, courseId])
  @@map("area_course_hours")
}

model Course {
  id              Int              @id @default(autoincrement()) @db.SmallInt
  name            String           @db.VarChar(48)
  color           String?          @db.VarChar(7)
  description     String?          @db.VarChar(255)
  areaCourseHours AreaCourseHour[]
  teachers        Teacher[]

  @@map("courses")
}

model Sede {
  id          Int     @id @default(autoincrement()) @db.SmallInt
  name        String  @unique @db.VarChar(48)
  description String? @db.VarChar(255)
  phone       String? @db.VarChar(20)
  classes     Class[]

  @@map("sedes")
}

model Shift {
  id           Int           @id @default(autoincrement()) @db.SmallInt
  name         String        @db.VarChar(48)
  startTime    DateTime?     @map("start_time") @db.Time(6)
  endTime      DateTime?     @map("end_time") @db.Time(6)
  classes      Class[]
  hourSessions HourSession[]

  @@map("shifts")
}

model Class {
  id        String     @id @default(uuid()) @db.Uuid
  name      String     @db.VarChar(48)
  idSede    Int        @map("id_sede") @db.SmallInt
  areaId    Int        @map("area_id") @db.SmallInt
  shiftId   Int        @map("shift_id") @db.SmallInt
  monitorId String?    @unique @map("monitor_id") @db.Uuid
  capacity  Int        @default(100) @db.SmallInt
  urlMeet   String?    @map("url_meet") @db.VarChar(48)
  area      Area       @relation(fields: [areaId], references: [id])
  sede      Sede       @relation(fields: [idSede], references: [id])
  monitor   Monitor?   @relation(fields: [monitorId], references: [id])
  shift     Shift      @relation(fields: [shiftId], references: [id])
  schedules Schedule[]

  @@index([idSede])
  @@map("classes")
}

model HourSession {
  id              Int        @id @default(autoincrement()) @db.SmallInt
  shiftId         Int        @map("shift_id") @db.SmallInt
  period          Int        @db.SmallInt
  startTime       DateTime   @map("start_time") @db.Time(6)
  endTime         DateTime   @map("end_time") @db.Time(6)
  durationMinutes Int        @default(40) @map("duration_minutes") @db.SmallInt
  shift           Shift      @relation(fields: [shiftId], references: [id])
  schedules       Schedule[]

  @@map("hour_sessions")
}

model Schedule {
  id            Int         @id @default(autoincrement())
  classId       String      @map("class_id") @db.Uuid
  hourSessionId Int         @map("hour_session_id") @db.SmallInt
  teacherId     String?     @map("teacher_id") @db.Uuid
  weekday       Weekday
  salon         Class       @relation(fields: [classId], references: [id])
  hourSession   HourSession @relation(fields: [hourSessionId], references: [id])
  teacher       Teacher?    @relation(fields: [teacherId], references: [id])

  @@unique([classId, hourSessionId, teacherId, weekday])
  @@map("schedules")
}

enum JobShiftType {
  FullTime @map("FULL_TIME")
  PartTime @map("PART_TIME")

  @@map("job_shift_types")
}

enum Weekday {
  Monday    @map("MONDAY")
  Tuesday   @map("TUESDAY")
  Wednesday @map("WEDNESDAY")
  Thursday  @map("THURSDAY")
  Friday    @map("FRIDAY")
  Saturday  @map("SATURDAY")
  Sunday    @map("SUNDAY")
}
